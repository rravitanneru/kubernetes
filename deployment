1.Deployment is a declarative way of defining pods and replicas set

the uses cases of the deployments in the kubernetes is

1. declare the pods,replica set in a managed way
2. roll-out the replicasets
3. upgrade the deployemt like with a new a change in the image version
4. we can roll-out the deployment to the older version deployment if the current deployment is not stable
5. we cab pause the deployment

--------------------------------------------------------------------------------------------------------
example deployment file                                                                                |
--------------------------------------------------------------------------------------------------------

deployment.yml

apiVersion: apps/v1
metadata:
  name: example_deployment
  lables:
    app: example_app
    tier: frontend
spec:
  replicas: 3
  selector:
    matchlables:
      app: example-app
  template:
    metadata:
    lables:
      app: example-app
    spec:
      containers:
        - name: example
          image: example_image1.0
          ports:
            - containerPort: 80



running a deployment

kubectl -f /kubernetes/deployment.yml
----------------------------------------
# checking the deployemnt roll-out status
kubectl rollout status deployment/nginx-deployment # to see the deployment roll-out status

Waiting for rollout to finish: 2 out of 3 new replicas have been updated...   #sample output for the above command
deployment "nginx-deployment" successfully rolled out                          #
-------------------------------------------------------------------

updatig the deployment


 kubectl set image deployment/example_deployemnt example1.0=example:1.0.91

--------------------------------------------------------------------------
to see the deployment process

kubectl get rs

---------------------------------------------------------------------------
rolling back the update if the deployment fails

to check history of the rolled deployemts

kubectl rollout history deployment/nginx-deployment
deployments "nginx-deployment"
REVISION    CHANGE-CAUSE
1           kubectl create -f docs/user-guide/nginx-deployment.yaml --record
2           kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1
3           kubectl set image deployment/nginx-deployment nginx=nginx:1.91           # sample output

*** This revision possible only when we record the deployment by using the record in the deployment time

kubectl create -f /kubernetes/deployment.yml --record

after finding the error and we are rolling back the deployment

kubectl rollout history deployment/nginx-deployment

or 

to specific deployment version 

for example see the history rollout  of the deployment

under Revision tab 2 the image is correct so we can revise the deployment to that the level by simply



$ kubectl rollout history deployment/nginx-deployment --revision=2
# sample output

deployments "nginx-deployment" revision 2
  Labels:       app=nginx
          pod-template-hash=1159050644
  Annotations:  kubernetes.io/change-cause=kubectl set image deployment/nginx-deployment nginx=nginx:1.9.1
  Containers:
   nginx:
    Image:      nginx:1.9.1
    Port:       80/TCP
     QoS Tier:
        cpu:      BestEffort
        memory:   BestEffort
    Environment Variables:      <none>
  No volumes.

-=-------------------------------------------------------

Scaling a deployment

we can scale the deployment like this


$ kubectl scale deployment nginx-deployment --replicas=10

# sample-output
deployment "nginx-deployment" scaled

An advanced scaling looks like this

kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80

# sample output
deployment "nginx-deployment" autoscaled


















